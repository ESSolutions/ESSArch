sudo: required
language: python
dist: xenial

cache:
  pip: true
  yarn: true

branches:
  only:
    - master
    - the-big-merge

stages:
  - lint
  - test

templates:
  mariadb: &mariadb DATABASE_URL_ESSARCH="mysql://root@localhost/essarch?isolation_level=read committed"
  mysql: &mysql DATABASE_URL_ESSARCH="mysql://root@localhost/essarch?isolation_level=read committed"
  postgres: &postgres DATABASE_URL_ESSARCH="postgres://postgres@localhost/essarch?isolation_level=read committed"
  mssql: &mssql DATABASE_URL_ESSARCH="mssql://SA:MyPassword42@localhost:1433/essarch?isolation_level=read committed&driver=ODBC Driver 17 for SQL Server"

matrix:
  include:
    - name: 'flake8'
      stage: lint
      python: '3.7'
      before_install: skip
      install: pip install -r requirements/lint.txt
      before_script: skip
      script: flake8
      after_success: skip

    - name: 'isort'
      stage: lint
      python: '3.7'
      before_install: skip
      install: pip install -r requirements/lint.txt
      before_script: skip
      script: isort --recursive --check-only --diff ESSArch_Core
      after_success: skip

    - name: 'prettier'
      stage: lint
      language: node_js
      node_js: 'lts/*'
      before_install: skip
      install: yarn install --frozen-lockfile
      before_script: skip
      script: yarn prettier --check "ESSArch_Core/frontend/static/frontend/**/*.{ts,js,scss,html}"
      after_success: skip

    - name: 'stylelint'
      stage: lint
      language: node_js
      node_js: 'lts/*'
      before_install: skip
      install: yarn install --frozen-lockfile
      before_script: skip
      script: yarn stylelint
      after_success: skip

    - name: 'Build frontend'
      stage: test
      language: node_js
      node_js: 'lts/*'
      before_install: skip
      install: yarn install --frozen-lockfile
      before_script: skip
      script: yarn build:prod
      after_success: skip

    - name: 'Build documentation'
      stage: test
      python: '3.7'
      before_install: skip
      install:
        - sudo mkdir -p /ESSArch/log/
        - sudo chmod 777 /ESSArch/log/
        - python -m pip install --upgrade pip wheel setuptools

        # Pin six to avoid dependency errors,
        # see https://github.com/pypa/pip/issues/4887

        - pip install --upgrade six>=1.12.0
        - pip install .[docs]

      script:
        - cd ESSArch_Core/docs
        - make html SPHINXOPTS="-W"
      after_success: skip

    - name: 'Linux with SQLite'
      stage: test
      python: '3.7'
      services:
        - redis-server

    - name: 'Linux (arm64) with SQLite'
      stage: test
      arch: arm64
      dist: bionic
      python: '3.7'
      addons:
        apt:
          packages:
            - libcairo2
            - libffi-dev
            - libgdk-pixbuf2.0-0
            - libjpeg-dev
            - libmagickwand-dev
            - libpango-1.0-0
            - libpangocairo-1.0-0
            - libxml2
            - libxslt-dev
            - redis-server
            - zlib1g-dev
      env:
        - ARCH=arm64 # workaround for cache
      before_script:
        - pip check
        - essarch settings generate -qp local_essarch_settings.py
        - redis-server --daemonize yes

    - name: 'Linux with MSSQL'
      stage: test
      python: '3.7'
      services:
        - docker
        - redis-server
      before_install:
        - sudo mkdir -p /ESSArch/log/
        - sudo chmod 777 /ESSArch/log/
        - docker pull mcr.microsoft.com/mssql/server:2017-latest-ubuntu
        - docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=MyPassword42' -p 1433:1433 -d mcr.microsoft.com/mssql/server:2017-latest-ubuntu
        - curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        - curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
        - sudo apt-get update
        - sudo ACCEPT_EULA=Y apt-get install msodbcsql17 unixodbc-dev
        - python -m pip install --upgrade pip wheel codecov setuptools

        # Pin six to avoid dependency errors,
        # see https://github.com/pypa/pip/issues/4887
        - pip install --upgrade six>=1.12.0
        - pip install -r requirements/tests.txt
      install:
        - pip install .[mssql]
      env:
        - *mssql

    - name: 'Linux with MariaDB'
      stage: test
      python: '3.7'
      services:
        - redis-server
      addons:
        mariadb: '10.3'
      install:
        - mysql --user="root" --execute="SET GLOBAL character_set_server='utf8mb4'"
        - pip install .[mysql]
      env:
        - *mariadb

    - name: 'Linux with MySQL'
      stage: test
      python: '3.7'
      services:
        - mysql
        - redis-server
      install:
        - mysql --user="root" --execute="SET GLOBAL character_set_server='utf8mb4'"
        - pip install .[mysql]
      env:
        - *mysql

    - name: 'Linux with PostgreSQL'
      stage: test
      python: '3.7'
      services:
        - postgresql
        - redis-server
      install:
        - pip install .[postgres]
      env:
        - *postgres

    - name: 'Windows with MSSQL'
      stage: test
      os: windows
      language: sh
      python: '3.7'
      services: docker
      cache:
        directories:
          - '${HOME}/AppData/Local/pip/Cache/wheels'
      before_install:
        - mkdir -p /c/ESSArch/log/
        - docker pull christianacca/mssql-server-windows-express:1803
        - docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=MyPassword42' -p 1433:1433 -d christianacca/mssql-server-windows-express:1803
        - wget https://github.com/tschoonj/GTK-for-Windows-Runtime-Environment-Installer/releases/download/2018-10-03/gtk3-runtime-3.24.1-2018-10-03-ts-win64.exe
        - powershell 'Start-Process -FilePath "gtk3-runtime-3.24.1-2018-10-03-ts-win64.exe" -Wait -PassThru -ArgumentList /S'
        - wget https://download.microsoft.com/download/E/6/B/E6BFDC7A-5BCD-4C51-9912-635646DA801E/en-US/msodbcsql_17.3.1.1_x64.msi
        - powershell "Start-Process msiexec.exe -Wait -ArgumentList '/I msodbcsql_17.3.1.1_x64.msi /qn /norestart IACCEPTMSODBCSQLLICENSETERMS=YES'"
        - choco install python --version 3.7.5
        - choco install imagemagick
        - choco install redis-64
        - start redis-server
        - export PATH="/c/Program Files/GTK3-Runtime Win64/bin:/c/Python37:/c/Python37/Scripts:$PATH"
        - python -m pip install --upgrade pip wheel codecov setuptools

        # Pin six to avoid dependency errors,
        # see https://github.com/pypa/pip/issues/4887
        - pip install --upgrade six>=1.12.0
        - pip install -r requirements/tests.txt
      install:
        - pip install .[mssql]
      after_script:
        - redis-cli shutdown
      after_success:
        - choco install codecov
        - codecov -F backend
      env:
        - *mssql

before_install:
  - sudo mkdir -p /ESSArch/log/
  - sudo chmod 777 /ESSArch/log/

  - sudo apt-add-repository -y ppa:jonathonf/backports;
  - sudo apt-get -y update && sudo apt-get install -y sqlite3;
  - sqlite3 --version

  - python -m pip install --upgrade pip wheel codecov setuptools

  # Pin six to avoid dependency errors,
  # see https://github.com/pypa/pip/issues/4887
  - pip install --upgrade six>=1.12.0
  - pip install -r requirements/tests.txt

install:
  - pip install .

before_script:
  - pip check
  - essarch settings generate -qp local_essarch_settings.py

script:
  - coverage run manage.py test

after_success:
  - bash <(curl -s https://codecov.io/bash) -c -F backend
