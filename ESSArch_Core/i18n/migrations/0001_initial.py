# Generated by Django 3.0.2 on 2020-01-18 14:29
from django.db import connection, migrations, models
from django.db.migrations.recorder import MigrationRecorder
from django.core.serializers import base, python
from django.core.management import call_command


def load_fixture(apps, schema_editor):
    # Save the old _get_model() function
    old_get_model = python._get_model

    # Define new _get_model() function here, which utilizes the apps argument to
    # get the historical version of a model. This piece of code is directly stolen
    # from django.core.serializers.python._get_model, unchanged. However, here it
    # has a different context, specifically, the apps variable.
    def _get_model(model_identifier):
        try:
            return apps.get_model(model_identifier)
        except (LookupError, TypeError):
            raise base.DeserializationError("Invalid model identifier: '%s'" % model_identifier)

    # Replace the _get_model() function on the module, so loaddata can utilize it.
    python._get_model = _get_model

    try:
        # Call loaddata command
        call_command('loaddata', 'languages_data.json.gz', app_label='i18n')
    finally:
        # Restore old _get_model() function
        python._get_model = old_get_model


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('agents', '0001_initial'),
        ('countries_plus', '0005_auto_20160224_1804'),
    ]

    operations = [
        migrations.CreateModel(
            name='Language',
            fields=[
                ('iso_639_1', models.CharField(max_length=2, primary_key=True, serialize=False)),
                ('iso_639_2T', models.CharField(blank=True, max_length=3, unique=True)),
                ('iso_639_2B', models.CharField(blank=True, max_length=3, unique=True)),
                ('iso_639_3', models.CharField(blank=True, max_length=3)),
                ('name_en', models.CharField(max_length=100)),
                ('name_native', models.CharField(max_length=100)),
                ('family', models.CharField(max_length=50)),
                ('notes', models.CharField(blank=True, max_length=100)),
                ('countries_spoken', models.ManyToManyField(blank=True, to='countries_plus.Country')),
            ],
            options={
                'verbose_name': 'Language',
                'verbose_name_plural': 'Languages',
                'ordering': ['name_en'],
            },
        ),
    ]

    applied = MigrationRecorder(connection).applied_migrations()
    applied = {app for (app, _) in applied}
    if 'languages_plus' in applied:
        migrations.RunPython(load_fixture)

